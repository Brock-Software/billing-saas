// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique
  phone         String?
  name          String?
  hasSignedIn   Boolean        @default(false)
  deviceToken   String?
  image         UserImage?
  password      Password?
  roles         Role[]
  sessions      Session[]
  connections   Connection[]
  uploads       Upload[]
  organizations Organization[]

  @@map("users")
}

model Organization {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  line1         String?
  line2         String?
  city          String?
  state         String?
  zip           String?
  phone         String?
  email         String?
  stripeKeyHash String?
  autoStop      Boolean  @default(true)
  users         User[]
  clients       Client[]

  @@map("organizations")
}

model UserImage {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  altText     String?
  contentType String
  blob        Bytes
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique

  @@map("users_images")
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@map("passwords")
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expirationDate DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String

  @@index([userId])
  @@map("sessions")
}

model Permission {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String   @default("")
  roles       Role[]

  @@unique([action, entity, access])
  @@map("permissions")
}

model Role {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @unique
  description String       @default("")
  users       User[]
  permissions Permission[]

  @@map("roles")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      String /// The type of verification, e.g. "email" or "phone"
  target    String /// The thing we're trying to verify, e.g. a user's email or phone number
  secret    String /// The secret key used to generate the otp
  algorithm String /// The algorithm used to generate the otp
  digits    Int /// The number of digits in the otp
  period    Int /// The number of seconds the otp is valid for
  charSet   String /// The valid characters for the otp
  metadata  String? /// Additional JSON data to instruct actions to take after verification, e.g. create a teacher '{ "createTeacherProfile": ... }'
  expiresAt DateTime?

  @@unique([target, type])
  @@map("verifications")
}

model Connection {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  providerName String
  providerId   String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String

  @@unique([providerName, providerId])
  @@map("connections")
}

model FeatureFlag {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String?
  isEnabled   Boolean  @default(false)

  @@map("feature_flags")
}

model Upload {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  name        String
  contentType String
  blob        Bytes
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String

  @@map("uploads")
}

model Job {
  id             String   @id @default(uuid())
  type           String
  data           String // JSON stringified data
  status         String   @default("pending") // pending, processing, completed, failed
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  attempts       Int      @default(0)
  maxAttempts    Int      @default(3)
  error          String?
  blockedByJobId String?
  blockedByJob   Job?     @relation("BlockedBy", fields: [blockedByJobId], references: [id])
  blocks         Job[]    @relation("BlockedBy")

  @@map("jobs")
}

model Setting {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String   @unique
  value     String

  @@map("settings")
}

model Client {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime     @updatedAt
  stripeCustomerId String?
  name             String
  email            String?
  company          String?
  line1            String?
  line2            String?
  city             String?
  state            String?
  zip              String?
  phone            String?
  hourlyRate       Decimal?
  timeEntries      TimeEntry[]
  invoices         Invoice[]
  orgId            String
  organization     Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model TimeEntry {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startTime   DateTime
  endTime     DateTime?
  hourlyRate  Decimal?
  description String?
  clientId    String?
  client      Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoiceId   String?
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id])

  @@map("time_entries")
}

model Invoice {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  entriesStartDate  DateTime?
  entriesEndDate    DateTime?
  sentAt            DateTime?
  paidAt            DateTime?
  number            String
  issueDate         DateTime    @default(now())
  dueDate           DateTime
  stripePaymentLink String?
  clientId          String
  client            Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  timeEntries       TimeEntry[]
  tax               Decimal?
  discount          Decimal?

  @@unique([number, clientId])
  @@map("invoices")
}
